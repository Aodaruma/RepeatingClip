--[[
This script is version 1.01. If it is outdated, please replace it with a newer script.
We are not responsible for any damage caused by the use of this script.

developed by Aodaruma (@Aodaruma_) / MIT License
]]
--track0:,0,200,10,1
--track1:NbsO,0,2000,30
--track2:ĎťŚ(%),-300,300,0
--track3:űü,1,8,1,1
--check0:źűü,0
--dialog:空白,local blank=5;変化率空白を無効/chk,local isDisableCB=0;回転に付随/chk,local isFollowRotation=1;ｴｯｼﾞ抽出(0-2),local edgeExtract=0;単色化/chk,local isCol=0;└ Color/col,local col=0xdddddd;└ GradColor/col,local gcol=0x000000;仮想バッファ/chk,local isBuffer=0;└ バッファW,local bufferW=obj.screen_w;└ バッファH,local bufferH=obj.screen_h;

local n, clipping, c, d, isBoth = obj.track0, obj.track1, obj.track2 / 100, obj.track3, obj.check0
local x, y = 0, 0 --obj.ox,obj.oy
local w, h = obj.w, obj.h
local directions = { "ă", "ş", "ś", "E", "ş", "ă", "E", "ś" }
blank = blank or 0
edgeExtract = edgeExtract or 0

-- define drawing
local drawing = function(n, clipping, c, d, isBoth)
	local dis, rx, ry
	local r = isBoth and 1 or 0

	for i = 1, n do
		dis = clipping * (c / 2 * i * (1 - isDisableCB) + 1) - blank

		-- load
		if isBuffer == 1 then
			obj.setoption("dst", "tmp")
		end --tempbuffer
		obj.copybuffer("obj", "cache:RC")

		-- colorize
		if isCol == 1 and col then
			gcol = gcol or col
			local mcol, mgcol = { RGB(col) }, { RGB(gcol) } -- num to table
			local af, uf = (i / n), 1 - (i / n)
			local rcol =
				RGB(mcol[1] * uf + mgcol[1] * af, mcol[2] * uf + mgcol[2] * af, mcol[3] * uf + mgcol[3] * af) -- changing RGB to gradate
			obj.effect("PFť", "color", rcol, "PxđŰˇé", 0)
		end

		-- clipping
		obj.effect("NbsO", directions[(d + 4 * r - 1) % 8 + 1], clipping * (c * i + 1), "SĚĘuđĎX", 1)
		rx, ry =
			((w - dis) * i + clipping / 2) * ((d + r) % 2 * 2 - 1) * (1 - math.ceil(d / 2) % 2),
			((h - dis) * i + clipping / 2) * ((d + r) % 2 * 2 - 1) * (math.ceil(d / 2) % 2)
		if isFollowRotation == 1 then
			local t = obj.rz / 180 * math.pi
			local mx, my = rx, ry
			rx = mx * math.cos(t) - my * math.sin(t)
			ry = mx * math.sin(t) + my * math.cos(t)
		end

		-- drawing
		obj.draw(x + rx, y + ry)
	end
end

-- save
obj.copybuffer("cache:RC", "obj")

-- tempbuffer
if isBuffer == 1 then
	bufferW, bufferH = bufferW or obj.screen_w, bufferH or obj.screen_h
	if obj.index == 0 then
		obj.setoption("dst", "tmp", bufferW, bufferH)
	else
		obj.setoption("dst", "tmp")
	end
end

-- draw original
obj.draw()

-- draw items
drawing(n, clipping, c, d)
if isBoth then
	drawing(n, clipping, c, d, isBoth)
end

-- draw tempbuffer
if isBuffer == 1 and obj.index == obj.num - 1 then
	obj.load("tempbuffer")
	obj.draw()
end
